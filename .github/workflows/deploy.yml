name: Rust

on:
  push:
    tags: 
      - 'v*'

env:
  CARGO_TERM_COLOR: always
  NAME: vocabulist
  BINARY_NAME: vocabulist_rs

jobs:
  deploy:
    name: Deploy from ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest]

    steps:
    - uses: actions/checkout@v2
      
    - name: Cache Cargo
      uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
    - name: Set Target MacOS
      if: matrix.os == 'macos-latest'
      run: echo "::set-env name=TARGET::x86_64-apple-darwin"
      
    - name: Set Target Linux
      if: matrix.os == 'ubuntu-latest'
      run: echo "::set-env name=TARGET::x86_64-unknown-linux-gnu"
    
    - name: Build Release
      run: cargo build --verbose --release --workspace --target $TARGET
      
    - name: Set Tag
      run: echo "::set-env name=TAG::${{ github.ref }}"
      
    - name: Package Release Linux 
      run: |
        src_path="$HOME"
        stage_path="staging_directory"
        package_path="$stage_path/$NAME"
        package="$NAME"

        tag="$(basename $TAG)"

        cd $src_path    # change into the working directory
        
        mkdir -p $package_path
        
        cp target/$TARGET/release/$BINARY_NAME $package_path
        cp jmdict.db $package_path
        cp ACKNOWLEDGEMENTS.md $package_path
        cp LICENSE.md $package_path
        
        cd $stage_path
        
        tar czf "$src/$NAME-$tag-$TARGET.tar.gz" "$package"

        cd $src_path
    
    - name: Create a Release
      id: create_release
      uses: actions/create-release@v1
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}

    - name: Upload the Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: $HOME/${{ "$NAME-$(basename $TAG)-$TARGET.tar.gz" }}
          asset_name: ${{ "$NAME-$(basename $TAG)-$TARGET.tar.gz" }}
          asset_content_type: application/zip
